
#include <iostream>
#include <string>
using namespace std;


void FillArray(int arr[100], int& length)
{

    length = 10;
    arr[0] = 10;
    arr[1] = 20;
    arr[2] = 30;
    arr[3] = 20;
    arr[4] = 10;
    arr[5] = 30;
    arr[6] = 40;
    arr[7] = 40;
    arr[8] = 40;
    arr[9] = 10;

}

void PrintArray(int arr[100], int length)
{
    for (int i = 0; i < length; i++)
    {
        cout << arr[i] << " ";
    }
    cout << "\n";
}


short FindNummerPositionInarray(int Number, int arr[100], int length)
{

    for (int i = 0; i < length; i++)
    {
        if (arr[i] == Number)
        {

            return i;
        }
    }
    return -1;

}
bool IsNumberInArray(int Number, int arr[100], int length)
{
    return FindNummerPositionInarray(Number, arr, length) != -1;



}
int AddarrayElement(int Number, int arr[100], int& length)
{
    length++;
    arr[length - 1] = Number;

    return Number;
}

void CopyDistivctNumbetsToArray(int arrSource[100], int arrDestination[100], int SourceLength, int& DestinationLength)
{
    for (int i = 0; i < SourceLength; i++)
    {


        if (!IsNumberInArray(arrSource[i], arrDestination, DestinationLength))
        {
            AddarrayElement(arrSource[i], arrDestination, DestinationLength);

        }
    }
}
int main()
{

    int arrSource[100], arrDestination[100], SourceLength = 0, DestinationLength = 0;
    FillArray(arrSource, SourceLength);

    cout << "\nArray 1 elements:\n";
    PrintArray(arrSource, SourceLength);


    CopyDistivctNumbetsToArray(arrSource, arrDestination, SourceLength, DestinationLength);



    cout << "\nArray 1 distinct elements:\n";

    PrintArray(arrDestination, DestinationLength);

    return 0;
}

